{"version":3,"sources":["serviceWorker.js","components/CalcButton.js","components/CalcDisplay.js","utils/calcs.js","modules/TinyCalculator.js","index.js"],"names":["Boolean","window","location","hostname","match","CalcButton","this","props","onClick","className","React","Component","CalcDisplay","displayValue","RunOperators","prvVal","nxtVal","TinyCalculator","state","value","operator","waitingForOperand","listenKeyDownFromKeyboard","event","key","console","log","test","preventDefault","inputDigit","parseInt","calc","clearLastChar","clearAll","setState","substring","length","newValue","parseFloat","String","digit","nxtOper","inputValue","currentValue","isNaN","document","addEventListener","removeEventListener","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.45b4d13e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nclass CalcButton extends React.Component {\n    render() {\n        const { onClick, className, ...props } = this.props\n\n        return (\n            <div onClick={onClick}>\n                <button className={`calculator-key ${className}`} {...props} />\n            </div>\n        )\n    }\n}\n\nexport default CalcButton;","import React from 'react';\nimport '../styles/App.css'\n\nclass CalcDisplay extends React.Component {\n    render() {\n        const { displayValue, className } = this.props\n\n        return (\n            <div className=\"calculator-display-row\">\n                <div className={`calculator-display ${className}`}>{displayValue}</div>\n            </div>\n        )\n    }\n}\n\nexport default CalcDisplay;","export const RunOperators = {\n    '/': (prvVal, nxtVal) => prvVal / nxtVal,\n    '+': (prvVal, nxtVal) => prvVal + nxtVal,\n    '-': (prvVal, nxtVal) => prvVal - nxtVal,\n    '=': (prvVal, nxtVal) => nxtVal\n}","import React from 'react';\nimport '../styles/App.css';\nimport CalcButton from '../components/CalcButton';\nimport CalcDisplay from '../components/CalcDisplay';\nimport { RunOperators } from '../utils/calcs';\n\nclass TinyCalculator extends React.Component {\n    state = {\n        value: null,\n        displayValue: '0',\n        operator: null,\n        waitingForOperand: false\n    };\n\n    clearAll() {\n        this.setState({\n            value: null,\n            displayValue: '0',\n            operator: null,\n            waitingForOperand: false\n        })\n    }\n\n    clearLastChar() {\n        const { displayValue } = this.state\n\n        this.setState({\n            displayValue: displayValue.substring(0, displayValue.length - 1) || '0'\n        })\n    }\n\n    toggleSign() {\n        const { displayValue } = this.state\n        const newValue = parseFloat(displayValue) * -1\n\n        this.setState({\n            displayValue: String(newValue)\n        })\n    }\n\n    inputDigit(digit) {\n        const { displayValue, waitingForOperand } = this.state\n\n        if (waitingForOperand) {\n            this.setState({\n                displayValue: String(digit),\n                waitingForOperand: false\n            })\n        } else {\n            this.setState({\n                displayValue: displayValue === '0' ? String(digit) : displayValue + digit\n            })\n        }\n    }\n\n    calc(nxtOper) {\n        const { value, displayValue, operator } = this.state\n        const inputValue = parseFloat(displayValue)\n\n        if (value == null) {\n            this.setState({\n                value: inputValue\n            })\n        } else if (operator) {\n            console.log('Current value is: ', value)\n            console.log('Input value is: ', inputValue)\n            const currentValue = value || 0\n            const newValue = RunOperators[operator](currentValue, inputValue)\n            console.log('Result is:', newValue)\n            if (isNaN(newValue) === false) {\n                this.setState({\n                    value: newValue,\n                    displayValue: String(newValue)\n                })\n            }\n        }\n\n        this.setState({\n            waitingForOperand: true,\n            operator: nxtOper\n        })\n    }\n\n    listenKeyDownFromKeyboard = (event) => {\n        let { key } = event\n        console.log('--------------Listen from keyboard ----------')\n        console.log('Your key is inputed from keyboard: ', key)\n        if (key === 'Enter') {\n            key = '='\n        }\n\n        if ((/\\d/).test(key)) { // Check key was input is number or not\n            event.preventDefault()\n            this.inputDigit(parseInt(key, 10))\n        } else if (key in RunOperators) {\n            event.preventDefault()\n            this.calc(key)\n        }\n        else if (key === 'Backspace') {\n            event.preventDefault()\n            this.clearLastChar()\n        } else if (key === 'Clear') {\n            event.preventDefault()\n\n            this.clearAll()\n        }\n    };\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.listenKeyDownFromKeyboard)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.listenKeyDownFromKeyboard)\n    }\n\n    render() {\n        const { displayValue } = this.state\n\n        return (\n            <div className=\"App\">\n                <div className=\"calculator\">\n                    <CalcDisplay displayValue={displayValue}></CalcDisplay>\n\n                    <div className=\"calculator-keypad\">\n                        <div className=\"input-keys\">\n                            <div className=\"function-keys\">\n                                <CalcButton className=\"key-clear\" onClick={() => this.clearAll()}>{'clear'}</CalcButton>\n                            </div>\n\n                            <div className=\"digit-keys\">\n                                <CalcButton className=\"key-1\" onClick={() => this.inputDigit(1)}>1</CalcButton>\n                                <CalcButton className=\"key-2\" onClick={() => this.inputDigit(2)}>2</CalcButton>\n                                <CalcButton className=\"key-3\" onClick={() => this.inputDigit(3)}>3</CalcButton>\n                                <CalcButton className=\"key-4\" onClick={() => this.inputDigit(4)}>4</CalcButton>\n                                <CalcButton className=\"key-5\" onClick={() => this.inputDigit(5)}>5</CalcButton>\n                                <CalcButton className=\"key-6\" onClick={() => this.inputDigit(6)}>6</CalcButton>\n                                <CalcButton className=\"key-7\" onClick={() => this.inputDigit(7)}>7</CalcButton>\n                                <CalcButton className=\"key-8\" onClick={() => this.inputDigit(8)}>8</CalcButton>\n                                <CalcButton className=\"key-9\" onClick={() => this.inputDigit(9)}>9</CalcButton>\n                            </div>\n                        </div>\n                        <div className=\"operator-keys\">\n                            <CalcButton className=\"key-divide\" onClick={() => this.calc('/')}>÷</CalcButton>\n                            <CalcButton className=\"key-subtract\" onClick={() => this.calc('-')}>−</CalcButton>\n                            <CalcButton className=\"key-add\" onClick={() => this.calc('+')}>+</CalcButton>\n                            <CalcButton className=\"key-equals\" onClick={() => this.calc('=')}>=</CalcButton>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default TinyCalculator;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport TinyCalculator from './modules/TinyCalculator';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TinyCalculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}